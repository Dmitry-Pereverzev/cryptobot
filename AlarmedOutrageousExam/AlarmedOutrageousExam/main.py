import json
import time
import logging
import requests
from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
from keep_alive import keep_alive

# === –í–ê–ñ–ù–û: –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ –¢–û–õ–¨–ö–û —Å–≤–æ–π –ù–û–í–´–ô —Ç–æ–∫–µ–Ω –æ—Ç @BotFather ===
BOT_TOKEN = "8286820563:AAHupL7wVd1Z8HnzLz2NYXoDI1MSKyIqukI"

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"

# –ü–æ—Ä–æ–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
PRICE_CHANGE_THRESHOLD = 1.0
CHECK_INTERVAL_SECONDS = 10

# –°–ª–æ–≤–∞—Ä—å user_coins: {chat_id (int): { "BTCUSDT": last_price, ... } }
user_coins = {}

# –°–ª–æ–≤–∞—Ä—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö job_id —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏
scheduled_chats = set()

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# ----------------- –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–æ–º -----------------
def load_data():
    global user_coins
    try:
        with open(DATA_FILE, "r") as f:
            raw = json.load(f)
        # –∫–ª—é—á–∏ –≤ JSON –±—É–¥—É—Ç —Å—Ç—Ä–æ–∫–∞–º–∏ ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º –∫ int
        user_coins = {int(k): v for k, v in raw.items()}
        logger.info(f"Loaded data for {len(user_coins)} chats.")
    except FileNotFoundError:
        user_coins = {}
    except Exception as e:
        logger.exception("Error loading data file, starting with empty data.")
        user_coins = {}


def save_data():
    try:
        # –ø—Ä–∏–≤–æ–¥–∏–º –∫–ª—é—á–∏ –∫ —Å—Ç—Ä–æ–∫–∞–º –¥–ª—è JSON
        with open(DATA_FILE, "w") as f:
            json.dump({str(k): v for k, v in user_coins.items()}, f)
        logger.debug("Data saved.")
    except Exception:
        logger.exception("Failed to save data.")


# ----------------- MEXC price -----------------
def get_price_mexc(symbol_raw):
    try:
        s = symbol_raw.upper()
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –±–µ–∑ USDT ‚Äî –¥–æ–±–∞–≤–∏–º
        if not s.endswith("USDT"):
            s = s + "USDT"
        url = f"https://api.mexc.com/api/v3/ticker/price?symbol={s}"
        r = requests.get(url, timeout=10)
        data = r.json()
        if not isinstance(data, dict) or "price" not in data:
            logger.warning(f"MEXC returned unexpected for {s}: {data}")
            return None, s  # –≤–µ—Ä–Ω—ë–º –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–∫–µ—Ä
        price = float(data["price"])
        return price, s
    except Exception as e:
        logger.exception(f"Error fetching price for {symbol_raw}")
        return None, symbol_raw


# ----------------- –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á -----------------
def schedule_check_for_chat(job_queue, chat_id):
    if chat_id in scheduled_chats:
        logger.debug(f"Chat {chat_id} already scheduled, skipping")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    job_name = f"check_prices_{chat_id}"
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    current_jobs = job_queue.get_jobs_by_name(job_name)
    for job in current_jobs:
        job.schedule_removal()
        logger.info(f"Removed duplicate job for chat {chat_id}")
    
    # run_repeating –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å context.job.context –∫–∞–∫ chat_id
    job_queue.run_repeating(check_prices,
                            interval=CHECK_INTERVAL_SECONDS,
                            first=10,
                            context=chat_id,
                            name=job_name)
    scheduled_chats.add(chat_id)
    logger.info(f"Scheduled checks for chat {chat_id}")


# ----------------- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω (–≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é) -----------------
def check_prices(context: CallbackContext):
    chat_id = context.job.context
    if not chat_id:
        return
    if chat_id not in user_coins or not user_coins[chat_id]:
        return

    for symbol, old_price in list(user_coins[chat_id].items()):
        price, used_symbol = get_price_mexc(symbol)
        # –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª None ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if price is None:
            continue

        # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        if not old_price or old_price == 0:
            user_coins[chat_id][symbol] = price
            save_data()
            continue

        change = (price - old_price) / old_price * 100

        if abs(change) >= PRICE_CHANGE_THRESHOLD:
            direction = "üìà –≤—ã—Ä–æ—Å–ª–∞" if change > 0 else "üìâ —É–ø–∞–ª–∞"
            text = f"{used_symbol}: {direction} –Ω–∞ {change:.2f}%\nüí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}"
            try:
                context.bot.send_message(chat_id=chat_id, text=text)
                # –æ–±–Ω–æ–≤–ª—è–µ–º "last price" —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                user_coins[chat_id][symbol] = price
                save_data()
                logger.info(
                    f"Sent update to {chat_id} for {symbol}: {change:.2f}%")
            except Exception:
                logger.exception(f"Failed to send message to {chat_id}")


# ----------------- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ -----------------
def start(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if chat_id not in user_coins:
        user_coins[chat_id] = {}
        save_data()

    update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø Crypto Radar.\n"
        "–î–æ–±–∞–≤—å –º–æ–Ω–µ—Ç—ã —á–µ—Ä–µ–∑ /add SYMBOL (–Ω–∞–ø—Ä–∏–º–µ—Ä /add BTC) ‚Äî —è –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö ‚â•1%.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /add /remove /list /help")

    # –ø–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    schedule_check_for_chat(context.job_queue, chat_id)


def help_cmd(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥—ã:\n/add SYMBOL ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–Ω–µ—Ç—É\n/remove SYMBOL ‚Äî —É–¥–∞–ª–∏—Ç—å\n/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫"
    )


def add_coin(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if chat_id not in user_coins:
        user_coins[chat_id] = {}

    if not context.args:
        update.message.reply_text("–£–∫–∞–∂–∏ —Å–∏–º–≤–æ–ª, –ø—Ä–∏–º–µ—Ä: /add BTC")
        return

    symbol = context.args[0].upper()
    price, used_symbol = get_price_mexc(symbol)
    if price is None:
        update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ MEXC: {symbol}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –∫–∞–∫ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (used_symbol)
    user_coins[chat_id][used_symbol] = price
    save_data()
    update.message.reply_text(
        f"‚úÖ {used_symbol} –¥–æ–±–∞–≤–ª–µ–Ω. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}")
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å –∑–∞–¥–∞—á–∞ –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    schedule_check_for_chat(context.job_queue, chat_id)


def remove_coin(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    if not context.args:
        update.message.reply_text("–£–∫–∞–∂–∏ —Å–∏–º–≤–æ–ª, –ø—Ä–∏–º–µ—Ä: /remove BTC")
        return
    symbol = context.args[0].upper()
    # –∫–ª–∏–µ–Ω—Ç –º–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–∏–∫–µ—Ä –∫–∞–∫ SYMBOLUSDT ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    keys = list(user_coins.get(chat_id, {}).keys())
    found = None
    for k in keys:
        if k.upper().startswith(
                symbol):  # startswith –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–æ–≤–∏—Ç—å BTC –∏ BTCUSDT
            found = k
            break
    if found:
        del user_coins[chat_id][found]
        save_data()
        update.message.reply_text(f"üóë –£–¥–∞–ª—ë–Ω {found}")
    else:
        update.message.reply_text("–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–≤–æ—ë–º —Å–ø–∏—Å–∫–µ.")


def list_coins_cmd(update: Update, context: CallbackContext):
    chat_id = update.effective_chat.id
    coins = user_coins.get(chat_id, {})
    if not coins:
        update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –º–æ–Ω–µ—Ç.")
        return
    lines = []
    for sym, last in coins.items():
        lines.append(f"{sym}: {last}")
    update.message.reply_text("–¢–≤–æ–∏ –º–æ–Ω–µ—Ç—ã:\n" + "\n".join(lines))


# ----------------- MAIN -----------------
def main():
    # –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    load_data()

    # –∑–∞–ø—É—Å–∫–∞–µ–º keep-alive (Flask)
    keep_alive()

    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_cmd))
    dp.add_handler(CommandHandler("add", add_coin))
    dp.add_handler(CommandHandler("remove", remove_coin))
    dp.add_handler(CommandHandler("list", list_coins_cmd))

    # —Å—Ç–∞—Ä—Ç—É–µ–º polling
    updater.start_polling()
    logger.info("Bot started.")

    # –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –≤—Å–µ—Ö —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    for chat_id in list(user_coins.keys()):
        try:
            schedule_check_for_chat(updater.job_queue, int(chat_id))
        except Exception:
            logger.exception(f"Failed to schedule chat {chat_id}")

    updater.idle()


if __name__ == "__main__":
    main()
